<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              2.0

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)         
*/
/*
	events resource for eyeLaunch
*/

function eyeLaunch_on_Message($params="") {
	reqLib('eyeWidgets','updateContent',$params);
}

function eyeLaunch_on_doLaunch($params="") {
	global $currentUser;
	
	$myApp = $GLOBALS['eyeLaunch_run']->text;

	$myApp = service('sec','cleanOutPutString',array('var'=>$myApp,'maxLen' => 50,'noreturn' => 1));
	
	$arguments = parseArguments($myApp);
	$myApp = $arguments[0];	
	array_shift($arguments);

	if($GLOBALS['su_chk']->checked == 1) {
		$user = $GLOBALS['eyeLaunch_user']->text;
		$pass = $GLOBALS['eyeLaunch_pass']->text;
		if(empty($user) || (empty($pass) && $currentUser != ROOTUSER)) {
			service('eyex','messageBox',array('content' => 'Error, empty username or password'));
			return false;
		}
		
		if(!um('userExist',array($user))) {
			service('eyex','messageBox',array('content' => 'Invalid username'));
			return false;
		}
		
		if(service('um','login',array($user,$pass)) || $currentUser == ROOTUSER) {
			$oldUser = $currentUser;
			$currentUser = $user;
			if(!service('proc','launch',array($myApp,$arguments))) {
				$currentUser = $oldUser;
				if(reqLib('errorCodes','getErrorCode') == PROC_APP_NOT_FOUND) {
					service('eyex','messageBox',array('content' => '%s not found','tokens' => array($myApp)));
					return false;
				}
			}
			$currentUser = $oldUser;
		} else {
			service('eyex','messageBox',array('content' => 'Error, invalid username or password'));
			return false;
		}
	} else {
		if(!service('proc','launch',array($myApp,$arguments))) {
			if(reqLib('errorCodes','getErrorCode') == PROC_APP_NOT_FOUND) {
				service('eyex','messageBox',array('content' => '%s not found','tokens' => array($myApp)));
				return false;
			}
		} 
	}
	

	proc('end');
}


function parseArguments($commandLine) {
       $commandLine = trim($commandLine);

       $commandLine_length = utf8_strlen($commandLine);
       $buffer = '';
       $arguments = array();
       $escape = false;
       $quotedMode = false;

       for ($i = 0; $i < $commandLine_length; ++$i) {
               if ($commandLine[$i] == ' ' && !$escape && !$quotedMode && utf8_strlen($buffer) > 0) {
                       array_push($arguments, $buffer);
                       $buffer = '';
               }
               else if ($commandLine[$i] == '\\' && !$escape) {
                       $escape = true;
               }
               else if ($commandLine[$i] == '"' && !$escape) {
                       $quotedMode = !$quotedMode;
               }
               else {
                       $buffer .= $commandLine[$i];
                       $escape = false;
               }
       }

       if (strlen($buffer) > 0) {
               array_push($arguments, $buffer);
       }

       return $arguments;
}

function eyeLaunch_on_Close(){
	proc('end');
}

?>